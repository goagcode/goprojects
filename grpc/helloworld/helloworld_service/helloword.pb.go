// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloword.proto

/*
Package helloworld_service is a generated protocol buffer package.

It is generated from these files:
	helloword.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
*/
package helloworld_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sentiment int32

const (
	Sentiment_HAPPY  Sentiment = 0
	Sentiment_SLEEPY Sentiment = 1
	Sentiment_ANGRY  Sentiment = 2
)

var Sentiment_name = map[int32]string{
	0: "HAPPY",
	1: "SLEEPY",
	2: "ANGRY",
}
var Sentiment_value = map[string]int32{
	"HAPPY":  0,
	"SLEEPY": 1,
	"ANGRY":  2,
}

func (x Sentiment) String() string {
	return proto.EnumName(Sentiment_name, int32(x))
}
func (Sentiment) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The request message containing the user's name.
type HelloRequest struct {
	Name        string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age         int32             `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Hobbies     []string          `protobuf:"bytes,3,rep,name=hobbies" json:"hobbies,omitempty"`
	BagOfTricks map[string]string `protobuf:"bytes,4,rep,name=bagOfTricks" json:"bagOfTricks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sentiment   Sentiment         `protobuf:"varint,5,opt,name=sentiment,enum=helloworld_service.Sentiment" json:"sentiment,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelloRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *HelloRequest) GetHobbies() []string {
	if m != nil {
		return m.Hobbies
	}
	return nil
}

func (m *HelloRequest) GetBagOfTricks() map[string]string {
	if m != nil {
		return m.BagOfTricks
	}
	return nil
}

func (m *HelloRequest) GetSentiment() Sentiment {
	if m != nil {
		return m.Sentiment
	}
	return Sentiment_HAPPY
}

// The response message containing the greetings.
type HelloResponse struct {
	Greeting string `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld_service.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "helloworld_service.HelloResponse")
	proto.RegisterEnum("helloworld_service.Sentiment", Sentiment_name, Sentiment_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeting service

type GreetingClient interface {
	// Sends a greeting. Service, unary request/response
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type greetingClient struct {
	cc *grpc.ClientConn
}

func NewGreetingClient(cc *grpc.ClientConn) GreetingClient {
	return &greetingClient{cc}
}

func (c *greetingClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/helloworld_service.Greeting/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeting service

type GreetingServer interface {
	// Sends a greeting. Service, unary request/response
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterGreetingServer(s *grpc.Server, srv GreetingServer) {
	s.RegisterService(&_Greeting_serviceDesc, srv)
}

func _Greeting_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld_service.Greeting/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld_service.Greeting",
	HandlerType: (*GreetingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeting_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloword.proto",
}

func init() { proto.RegisterFile("helloword.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x51, 0x4d, 0x4b, 0xf3, 0x40,
	0x10, 0x6e, 0x92, 0xa6, 0x6f, 0x33, 0x7d, 0xd5, 0x30, 0x78, 0x08, 0x05, 0x21, 0xf6, 0x14, 0x14,
	0x03, 0xd6, 0x8b, 0x28, 0x08, 0x15, 0x4a, 0x7b, 0x10, 0xad, 0x1b, 0x2f, 0x3d, 0x88, 0x24, 0xed,
	0x98, 0x86, 0xa6, 0xd9, 0xba, 0xbb, 0xad, 0xf4, 0xdf, 0xf8, 0x53, 0x25, 0x6d, 0xfa, 0x81, 0x8a,
	0xde, 0x66, 0x1e, 0x9e, 0x79, 0x3e, 0x76, 0xe1, 0x60, 0x44, 0x69, 0xca, 0xdf, 0xb9, 0x18, 0xfa,
	0x53, 0xc1, 0x15, 0x47, 0x5c, 0x03, 0xe9, 0xf0, 0x45, 0x92, 0x98, 0x27, 0x03, 0x6a, 0x7c, 0xe8,
	0xf0, 0xbf, 0x9b, 0xc3, 0x8c, 0xde, 0x66, 0x24, 0x15, 0x22, 0x94, 0xb3, 0x70, 0x42, 0x8e, 0xe6,
	0x6a, 0x9e, 0xc5, 0x96, 0x33, 0xda, 0x60, 0x84, 0x31, 0x39, 0xba, 0xab, 0x79, 0x26, 0xcb, 0x47,
	0x74, 0xe0, 0xdf, 0x88, 0x47, 0x51, 0x42, 0xd2, 0x31, 0x5c, 0xc3, 0xb3, 0xd8, 0x7a, 0xc5, 0x00,
	0x6a, 0x51, 0x18, 0x3f, 0xbc, 0x3e, 0x89, 0x64, 0x30, 0x96, 0x4e, 0xd9, 0x35, 0xbc, 0x5a, 0xf3,
	0xdc, 0xff, 0x6e, 0xed, 0xef, 0xda, 0xfa, 0xb7, 0xdb, 0x9b, 0x76, 0xa6, 0xc4, 0x82, 0xed, 0xaa,
	0xe0, 0x35, 0x58, 0x92, 0x32, 0x95, 0x4c, 0x28, 0x53, 0x8e, 0xe9, 0x6a, 0xde, 0x7e, 0xf3, 0xe8,
	0x27, 0xc9, 0x60, 0x4d, 0x62, 0x5b, 0x7e, 0xfd, 0x06, 0xec, 0xaf, 0xea, 0x79, 0xa3, 0x31, 0x2d,
	0x8a, 0x92, 0xf9, 0x88, 0x87, 0x60, 0xce, 0xc3, 0x74, 0xb6, 0x6a, 0x69, 0xb1, 0xd5, 0x72, 0xa5,
	0x5f, 0x6a, 0x8d, 0x53, 0xd8, 0x2b, 0xa2, 0xca, 0x29, 0xcf, 0x24, 0x61, 0x1d, 0xaa, 0xb1, 0x20,
	0x52, 0x49, 0x16, 0x17, 0x0a, 0x9b, 0xfd, 0xe4, 0x0c, 0xac, 0x4d, 0x08, 0xb4, 0xc0, 0xec, 0xb6,
	0x7a, 0xbd, 0xbe, 0x5d, 0x42, 0x80, 0x4a, 0x70, 0xd7, 0x6e, 0xf7, 0xfa, 0xb6, 0x96, 0xc3, 0xad,
	0xfb, 0x0e, 0xeb, 0xdb, 0x7a, 0xf3, 0x19, 0xaa, 0x9d, 0xe2, 0x14, 0x1f, 0xa1, 0x1a, 0x84, 0x8b,
	0xa5, 0x15, 0xba, 0x7f, 0x3d, 0x58, 0xfd, 0xf8, 0x17, 0xc6, 0x2a, 0x67, 0xa3, 0x14, 0x55, 0x96,
	0x1f, 0x7f, 0xf1, 0x19, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xcc, 0x81, 0x74, 0x0b, 0x02, 0x00, 0x00,
}
