// Code generated by protoc-gen-go. DO NOT EDIT.
// source: math.proto

/*
Package math is a generated protocol buffer package.

It is generated from these files:
	math.proto

It has these top-level messages:
	Operands
	Result
*/
package math

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math1 "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math1.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A message with numeric operands for a math operation
type Operands struct {
	Dividend int32 `protobuf:"varint,1,opt,name=dividend" json:"dividend,omitempty"`
	Divisor  int32 `protobuf:"varint,2,opt,name=divisor" json:"divisor,omitempty"`
}

func (m *Operands) Reset()                    { *m = Operands{} }
func (m *Operands) String() string            { return proto.CompactTextString(m) }
func (*Operands) ProtoMessage()               {}
func (*Operands) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Operands) GetDividend() int32 {
	if m != nil {
		return m.Dividend
	}
	return 0
}

func (m *Operands) GetDivisor() int32 {
	if m != nil {
		return m.Divisor
	}
	return 0
}

// A message with numerical results from a math operation
type Result struct {
	Quotient float32 `protobuf:"fixed32,1,opt,name=quotient" json:"quotient,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetQuotient() float32 {
	if m != nil {
		return m.Quotient
	}
	return 0
}

func init() {
	proto.RegisterType((*Operands)(nil), "Operands")
	proto.RegisterType((*Result)(nil), "Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Math service

type MathClient interface {
	Divide(ctx context.Context, in *Operands, opts ...grpc.CallOption) (*Result, error)
}

type mathClient struct {
	cc *grpc.ClientConn
}

func NewMathClient(cc *grpc.ClientConn) MathClient {
	return &mathClient{cc}
}

func (c *mathClient) Divide(ctx context.Context, in *Operands, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/Math/Divide", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Math service

type MathServer interface {
	Divide(context.Context, *Operands) (*Result, error)
}

func RegisterMathServer(s *grpc.Server, srv MathServer) {
	s.RegisterService(&_Math_serviceDesc, srv)
}

func _Math_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Math/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Divide(ctx, req.(*Operands))
	}
	return interceptor(ctx, in, info, handler)
}

var _Math_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Math",
	HandlerType: (*MathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Divide",
			Handler:    _Math_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "math.proto",
}

func init() { proto.RegisterFile("math.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x4d, 0x2c, 0xc9,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x72, 0xe0, 0xe2, 0xf0, 0x2f, 0x48, 0x2d, 0x4a, 0xcc,
	0x4b, 0x29, 0x16, 0x92, 0xe2, 0xe2, 0x48, 0xc9, 0x2c, 0xcb, 0x4c, 0x49, 0xcd, 0x4b, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0xf3, 0x85, 0x24, 0xb8, 0xd8, 0x41, 0xec, 0xe2, 0xfc, 0x22,
	0x09, 0x26, 0xb0, 0x14, 0x8c, 0xab, 0xa4, 0xc2, 0xc5, 0x16, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x02,
	0xd2, 0x5f, 0x58, 0x9a, 0x5f, 0x92, 0x99, 0x9a, 0x57, 0x02, 0xd6, 0xcf, 0x14, 0x04, 0xe7, 0x1b,
	0xa9, 0x71, 0xb1, 0xf8, 0x26, 0x96, 0x64, 0x08, 0xc9, 0x71, 0xb1, 0xb9, 0x80, 0xcd, 0x14, 0xe2,
	0xd4, 0x83, 0x59, 0x2c, 0xc5, 0xae, 0x07, 0x31, 0x41, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x2c, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x37, 0x06, 0xdb, 0xa4, 0x00, 0x00, 0x00,
}
